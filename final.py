
from threading import Thread
import threading
import signal
import sys
import pyshark
from datetime import datetime
import psutil
import time
import shutil

dangerous_keys=["exec",
			   "passthru",
			   "system",
			   "shell_exec", 
			   "\`\`" , "popen" , 
			   "proc_open" , 
			   "pcntl_exec",
			   "markup",
			   "system",]

def signal_handler(sig,frame):
	print("\n\n\r- You pressed Ctrl+C !\n")
	sys.exit(0)
signal.signal(signal.SIGINT,signal_handler)

def getInfo(packet):
	if packet.transport_layer == 'UDP':
		return '%s > %s LEN=%s' % (packet.layers[2].dstport,
            packet.layers[2].srcport,
            packet.layers[2].length)

	if packet.transport_layer == 'TCP':
		flag = getFlag(packet)
		if hasattr(packet,'ftp'):
		    if str(packet['ftp'].response) == "1":
		        return "Response: %s : %s" % (packet['ftp'].response_code, packet['ftp'].response_arg)
		    else:
		        return "Request : %s : %s" % (packet['ftp'].request_command, packet['ftp'].request_arg)

# =========================================|  DRUPALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL             ===============================
		if hasattr(packet,'http'):
			if (hasattr(packet['http'],'request_uri')
						and '%23'in packet['http'].request_uri 
						and not hasattr(packet,'mime_multipart')):
				name=[]
				value=[]
				if hasattr(packet,'urlencoded-form'):
					line =packet['urlencoded-form']._get_all_fields_with_alternates()
					for item in line:	
						if(item.showname_key=="Key"): name.append(item.showname_value)
						if(item.showname_key=="Value"): value.append(item.showname_value)
				print("-"*10)
				if any(akey in value for akey in dangerous_keys ) and "[#" in str(name) :
						result="[*]_[CVE 2018-7600] - POST: %s & Values: %s " % (name, value)
						while ',' in result:
							result=result.replace(',',';')
						print( result )
						return result

			# Check all POST when upload image in HTTP with changed URI
			if hasattr(packet,'mime_multipart'):
				if( packet['http'].request_method== 'POST' 	and '%23'  in packet['http'].request_uri ):
					line =packet['mime_multipart']._get_all_fields_with_alternates()
					name=""
					command=""
					# Scan all with # 
					for item in line:
						# NOW with 
						
						if  item.showname_key == "Content-Disposition" and '[#' in item.show  : 
							name += str(item.show)[str(item.show)  .find('=')  +1   : ]  +";"    
								# FIELDs's VALUE
						if  (item.showname_key == "Data" 
							and "_form" not in str(item.binary_value)								
							): 
								command += (str(item.binary_value,'utf-8')) +" "
					print(command)
							# CONTAIN DANGEROUS 
					if any(akey in command for akey in dangerous_keys ) :
						result="[*]_[CVE 2018-7600] - POST: %s  Remote code execute: %s " % (name, command)
						while ',' in result:
							result=result.replace(',',';')
						print( result )
						return result
# ==|===============         DRUPALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL             ===============================




		if 'ACK' in flag:
			return ('%s > %s [%s] Seq=%s Ack=%s Win=%s LEN=%s' % (packet.layers[2].dstport,
                packet.layers[2].srcport,
                getFlag(packet),
                packet.layers[2].seq,
                packet.layers[2].ack,
                packet.layers[2].window_size,
                packet.layers[2].len)).replace(",",".")
		else: return ('%s > %s [%s] Seq=%s Win=%s LEN=%s' % (packet.layers[2].port,
            packet.layers[2].srcport,
            getFlag(packet),
            packet.layers[2].seq,
            packet.layers[2].window_size,
            packet.layers[2].len)).replace(",",".")

def getFlag(pck):
	flag = int(pck.layers[2].flags,16)
	flags = []
	if flag & 0b00000001:
		flags.append('FIN')
	if flag & 0b00000010:
		flags.append('SYN')
	if flag & 0b00000100:
		flags.append('RST')
	if flag & 0b00001000:
		flags.append('PUS')
	if flag & 0b00010000:
		flags.append('ACK')
	if flag & 0b00100000:
		flags.append('URG')
	if flag & 0b01000000:
		flags.append('ECN')
	if flag & 0b10000000:
		flags.append('CWR')
	return ', '.join(flags)


#========== MAIN ==============
#= GET LIST INTEREFACE
addrs = psutil.net_if_addrs()
ifc = list(addrs.keys())
index = 1
for i in ifc:
    print("- [%s]:" % (str(index)) + i)
    index+=1

#= CHOOSE AN INTERFACE
chosen = input("Get interfce (DEFAULT [6]): ")
try:
    chosen = int(chosen)
except:
    chosen = 6
    pass

#= ASK OVERWRITE
overwrite = False
if (input("OVERWRITE  to csv (y) ? ") == "y" ):
	overwrite = True

#= START WITH INTERFACE
if input("From %s to csv (y) ? " % (ifc[chosen - 1])) == "y" :
    capture = pyshark.LiveCapture(interface=str(ifc[chosen - 1]))
    capture.sniff(timeout=1)


if overwrite:
	out = open('interface_to_file.csv','w')
	print('"No.","Time","Source","Destination","Protocol","Length","Info"',file=out)
	out.close()
	print(" ===== ADDed Header ===== ")


time_thread_File = time.time()
readingin_T2 = False
temp_list = []
#========== THREAD FUNC =============
def Sniffer_Thread(capture,overwrite,readingin_T2,temp_list):
	row = "%s,%s,%s,%s,%s,%s,%s"
	numpack = 1
	for packet in capture:
		if not readingin_T2:
			fout = open('interface_to_file.csv','a')
			# Thread 2 reading => Thread 1 save to temp list
			if not (len(temp_list) == 0):
				for i in temp_list:
					print(i,file=fout)
				temp_list.clear()

			#print(" - packet ") # INFO ----
			info = getInfo(packet)
			if hasattr(packet, 'ip'):
				print(row % (numpack,
						packet.sniff_timestamp,
						packet.ip.dst,
						packet.ip.src,
						packet.transport_layer,
						packet.length,
						info)
				,file=fout)
			else:
				print(row % (numpack,
						packet.sniff_timestamp,
						"","",
						packet.transport_layer,
						packet.length,
						info)
				,file=fout)
			fout.close()
		else:
			if hasattr(packet, 'ip'):
				temp_list.append(row % (numpack,packet.sniff_timestamp, packet.ip.dst, packet.ip.src, packet.transport_layer, packet.length, info) + "\n")
			else:
				temp_list.append(row % (numpack, packet.sniff_timestamp, "","", packet.transport_layer, packet.length, info) + "\n")

def Work_with_CSV(time_thread_File,readingin_T2):
	while True:

		# - Make a copy of file csv
		readingin_T2 = True
		shutil.copyfile('interface_to_file.csv', 'temp.csv')
		readingin_T2 = False

		# - start with copy
		if (time.time() - time_thread_File) > 6:
			print("\n\n\n ===== SCAN IN CSV AND RESET TIMER =====")

			print("  Finding FTP Brute Froce attack AND CVE 2018-7600 ---\n")
			#Response: 530 : Login incorrect.
			# My custom dict [ {"ip":"1.1.1.1"}, {"amont":"10"} ]
			list2 = []
			list_cve=[]

			file = open('temp.csv','r')
			for line in file:
				array_line = line.rstrip().split(",")
				# | FTP ============
				if array_line.count("Response: 530 : Login incorrect.") > 0:
					exist = False
					for i in list2:
						if array_line[2] in i["ip"]:
							i['amount']+=1
							exist = True
					if not exist: list2.append({"ip":array_line[2],"amount":1})

				# | CVE Drupal ===============================================================================================
				if  any(str(a_line).startswith('[*]_[CVE 2018-7600]') for a_line in array_line ):
					exist_cve = False
					for i in list_cve:
						if array_line[2] in i["ip"]:
							i['amount']+=1
							exist_cve = True
					if not exist_cve: list_cve.append({"ip":array_line[2],"amount":1})

			# Print list at 1 time read
			print("\t[FTP Brute Force] List of attacker's IP:")
			for detail in list2:
				if(detail["amount"] > 3):
					print("\t\t-IP: %s | Tried %s times with wrong PASS " % (detail["ip"],detail["amount"]))
			print("\n")

			# Print list CVE ===================================================================================================
			print("\t[ CVE 2018-7600 ] List of attacker's IP:")
			for detail_ in list_cve:
				print("\t\t-IP: %s | Tried %s to Exploit this CVE " % (detail_["ip"],detail_["amount"]))
			print("\n\n\n")
			# - RESET time
			time_thread_File = time.time()


#========== THREAD CONTROL ==============
try:

	t1 = threading.Thread(target=Sniffer_Thread ,args=(capture,overwrite,readingin_T2,temp_list,))
	t2 = threading.Thread(target=Work_with_CSV ,args=(time_thread_File,readingin_T2,))

	t1.start()
	t2.start()

	#print ("done in ", time.time()- t)
except:
	print("error")
